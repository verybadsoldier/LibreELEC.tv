diff -Naur xbmc_2/xbmc/powermanagement/PowerManager.cpp xbmc/xbmc/powermanagement/PowerManager.cpp
--- xbmc_2/xbmc/powermanagement/PowerManager.cpp	2016-12-25 12:34:41.099105441 +0100
+++ xbmc/xbmc/powermanagement/PowerManager.cpp	2016-12-28 13:36:01.451238812 +0100
@@ -32,6 +32,7 @@
 #include "guilib/LocalizeStrings.h"
 #include "interfaces/AnnouncementManager.h"
 #include "interfaces/builtins/Builtins.h"
+#include "network/Network.h"
 #include "pvr/PVRManager.h"
 #include "settings/lib/Setting.h"
 #include "settings/Settings.h"
@@ -46,6 +47,7 @@
 #include "android/AndroidPowerSyscall.h"
 #elif defined(TARGET_POSIX)
 #include "linux/FallbackPowerSyscall.h"
+#include "linux/XTimeUtils.h"
 #if defined(HAS_DBUS)
 #include "linux/ConsoleUPowerSyscall.h"
 #include "linux/ConsoleDeviceKitPowerSyscall.h"
@@ -270,6 +272,8 @@
 {
   CLog::Log(LOGNOTICE, "%s: Running resume jobs", __FUNCTION__);
 
+  WaitForNet();
+
   // reset out timers
   g_application.ResetShutdownTimers();
 
@@ -327,3 +331,30 @@
 #endif
   }
 }
+
+void CPowerManager::WaitForNet() const
+{
+  CNetwork& net = g_application.getNetwork();
+
+  // check if we have at least one network interface to wait for
+  if (!net.IsAvailable())
+    return;
+
+  CLog::Log(LOGNOTICE, "%s: Waiting for a network interface to come up", __FUNCTION__);
+
+  const static int numMaxTries = 50;
+  const static int intervalMs = 200;
+
+  for(int i=0; i < numMaxTries; ++i)
+  {
+    if (net.IsConnected())
+    {
+      CLog::Log(LOGNOTICE, "%s: a network interface is up after waiting %d ms", __FUNCTION__, i * intervalMs);
+      return;
+    }
+
+    Sleep(intervalMs);
+  }
+
+  CLog::Log(LOGNOTICE, "%s: No network interface did come up within %d ms... Giving up...", __FUNCTION__, numMaxTries * intervalMs);
+}
diff -Naur xbmc_2/xbmc/powermanagement/PowerManager.h xbmc/xbmc/powermanagement/PowerManager.h
--- xbmc_2/xbmc/powermanagement/PowerManager.h	2016-12-25 12:34:41.099105441 +0100
+++ xbmc/xbmc/powermanagement/PowerManager.h	2016-12-28 01:21:27.185801725 +0100
@@ -93,6 +93,8 @@
 
   void OnLowBattery();
 
+  void WaitForNet() const;
+
   IPowerSyscall *m_instance;
 };
 
